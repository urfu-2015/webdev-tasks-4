.page {
    height: 100%;
    margin: 0 auto;
}

.main {
    margin: 0 auto;
    height: 100%;
    background-color: #eee9e9;
    &__radio_hidden {
        display: none;
    }


    &__wrapper {
        margin: 0 auto;
        width: 90%;
        height: 100vh;
        display: flex;
        align-content: center;
    }

    &__all {
        margin: 0 auto;
        width: 100%;
        height: 100%;
        display: flex;
        align-content: center;
        justify-content: center;
        vertical-align: middle;
        flex-direction: row;
        align-items: center;
        text-align: center;
        transform-style: preserve-3d;
        perspective-origin: 50% 50%;
        perspective: 500px;
    }
}

.card
{
    background: white;
    display: flex;
    align-content: center;
    &__img {
        width: 150px;
        height: 100px;
        object-fit: cover;
    }

    $amount_elements = 7

    for $id in (1..$amount_elements) {
        .radio{$id} ~ &_order_{$id} {
            box-shadow: 5px 5px 5px rgba(0,0,0,.1);
        }
    }

    for $id in (1..$amount_elements) {
        .radio{$id}:checked ~ &_order_{$id} {
            //transition-duration: 1s;
            background: white;
        }
    }

    //задержка и время движения выбранного элемента
    set_delay($id) {
        if $id >= $min_delay {
            transition-delay: ($id - 1) * .1s;
            transition-duration: 1s;
        } else {
            transition-delay: .1s * ($amount_elements - $id);
            transition-duration: 1s;
        }
    }

    //данная магия каждой карточке позволяет увеличиваться в размере, за счет трансляции по z и выпадать ровно на
    //пользователя, а не в сторону(т е редактировка координаты относительно координаты x)
    set_translation($id) {
        transform: translateX(0% + ($amount_elements - $id - $half_of_amount + 1)*100) translateZ($translate_z);
    }

    $half_of_amount = ($amount_elements + ($amount_elements % 2))/2
    $min_delay = 0s + $half_of_amount
    $translate_z = 200px

    for $id in (1..$amount_elements) {
        .radio{$id}:checked ~ &_order_{$id} {
            set_delay($id)
            set_translation($id)
        }
    };

    //для каждой карточки определена ее позиция по отношения к другим карточкам
    //$other - относительно какой карточки
    //$value - вычисляется по формуле ниже(в зависимости от $other и карточки для которой вычисляется)
    //$relative_number - разница по модулю, между номерами карточки
    //$deg_of_rotate - угол поворота
    //$direction имеет два значение 'left' и 'right', обозначает, в какой стороне от карточки $other находится
    //карточка,к которой этот класс будет прикреплен(текуща карточка, номер = $id)
    //как формируется имя модификатора в классе:
    //{c какой стороны от выбранной карточки}{номер от карточки в этой стороне}-в-отношениие-к-{карточке с номером $other}
    set_transform_and_trans_duration($other, $relative_number, $id, $deg_of_rotate, $value, $direction) {
        .radio{$other}:checked ~ &_pos_{$direction}{$relative_number}-in-relation-to-{$other} {
            transform: translateX($value) rotateY($deg_of_rotate);
            set_delay($id, $other)
            transition-duration: 1s;
        }
    }

    //определние карточек относительно других
    //если $other = $id, то не рассматриваем, т к рассматриватся только одна карточка относительно другой
    set_relative_movement($id, $other) {
        $relative_number = $other - $id
        if $relative_number == 0 {
        } else {
            if $relative_number < 0 {
                $value = (0% + $amount_elements + 2 - ($other + $id)) * 50
                set_transform_and_trans_duration($other, 0 - $relative_number, $id, -50deg, $value, 'right')
            } else {
                $value = (0% + $amount_elements - ($other + $id)) * 50
                set_transform_and_trans_duration($other, $relative_number, $id, 50deg, $value, 'left')
            }
        }
    }

    //установка задержки относительно другой карточки
    set_delay($id, $other) {
        if $other <= 4 {
            transition-delay: .1s * ($amount_elements - $id);
        } else {
            transition-delay: .1s * ($id - 1);
        }
    }

    //перебор карточек, и далее перебор других карточек, вычисление их задержек
    //и координат движения относительно текущей(отвечает на вопрос, как будет двигаться $id,
    //если пользователь выбрал карточку с $other)
    for $id in (1..$amount_elements) {
        for $other in (1..$amount_elements) {
            set_relative_movement($id, $other)
        }
    }
}

